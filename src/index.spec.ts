import { deepStrictEqual, deepEqual, throws, rejects } from "assert";
import { secretbox } from "tweetnacl";
import {
  increment,
  add,
  key,
  Cipher,
  encryptedSize,
  decryptedSize,
  msgErrorEncryptedFileTooShort,
  msgErrorEncryptedFileBadHeader,
  encryptData,
  decryptData,
  encryptSegment,
  decryptSegment,
  msgErrorBadBase32Encoding,
  msgErrorTooLongAfterDecode,
  msgErrorNotAMultipleOfBlocksize,
} from ".";
import { base32hex } from "rfc4648";

describe("Filename Encryption", () => {
  it("TestEncryptSegmentBase32", async () => {
    const cases = [
      ["", ""],
      ["1", "p0e52nreeaj0a5ea7s64m4j72s"],
      ["12", "l42g6771hnv3an9cgc8cr2n1ng"],
      ["123", "qgm4avr35m5loi1th53ato71v0"],
      ["1234", "8ivr2e9plj3c3esisjpdisikos"],
      ["12345", "rh9vu63q3o29eqmj4bg6gg7s44"],
      ["123456", "bn717l3alepn75b2fb2ejmi4b4"],
      ["1234567", "n6bo9jmb1qe3b1ogtj5qkf19k8"],
      ["12345678", "u9t24j7uaq94dh5q53m3s4t9ok"],
      ["123456789", "37hn305g6j12d1g0kkrl7ekbs4"],
      ["1234567890", "ot8d91eplaglb62k2b1trm2qv0"],
      ["12345678901", "h168vvrgb53qnrtvvmb378qrcs"],
      ["123456789012", "s3hsdf9e29ithrqbjqu01t8q2s"],
      ["1234567890123", "cf3jimlv1q2oc553mv7s3mh3eo"],
      ["12345678901234", "moq0uqdlqrblrc5pa5u5c7hq9g"],
      ["123456789012345", "eeam3li4rnommi3a762h5n7meg"],
      [
        "1234567890123456",
        "mijbj0frqf6ms7frcr6bd9h0env53jv96pjaaoirk7forcgpt70g",
      ],
    ];
    const c = new Cipher();
    await key("", "", c);
    for (const [input, expected] of cases) {
      const actual = await encryptSegment(input, c);
      deepEqual(actual, expected);

      const recovered = await decryptSegment(expected, c);
      deepEqual(recovered, input);
    }
  });

  it("TestDecryptSegmentBase32", async () => {
    // We've tested the forwards above, now concentrate on the errors
    const longName = new Uint8Array(3328);
    for (let i = 0; i < longName.length; ++i) {
      longName[i] = parseInt("a");
    }
    const c = new Cipher();
    const cases = [
      ["64=", msgErrorBadBase32Encoding],
      ["!", ""],
      [new TextDecoder().decode(longName), msgErrorTooLongAfterDecode],
      [
        base32hex.stringify(new TextEncoder().encode("a")),
        msgErrorNotAMultipleOfBlocksize,
      ],
      [
        base32hex.stringify(new TextEncoder().encode("123456789abcdef")),
        msgErrorNotAMultipleOfBlocksize,
      ],
      [base32hex.stringify(new TextEncoder().encode("123456789abcdef0")), ""],
    ];

    for (const [input, errMsg] of cases) {
      // console.log(input)
      // await decryptSegment(input, c)
      if (errMsg === "") {
        rejects(async () => await decryptSegment(input, c));
      } else {
        rejects(async () => await decryptSegment(input, c), new Error(errMsg));
      }
    }
  });
});

describe("Nonce Computation", () => {
  it("TestNonceIncrement", async () => {
    const cases: Array<Array<Array<number>>> = [
      [[0x00], [0x01]],
      [[0xff], [0x00, 0x01]],
      [
        [0xff, 0xff],
        [0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
      ],
      [
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x01,
        ],
      ],
      [
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff,
        ],
        [
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00,
        ],
      ],
    ];

    for (const test of cases) {
      // console.log('inside loop')
      const x = new Uint8Array(secretbox.nonceLength);
      x.set(test[0]);
      const y = new Uint8Array(secretbox.nonceLength);
      y.set(test[1]);
      // console.log(x)
      // console.log(y)

      increment(x);
      deepStrictEqual(x, y);
    }
  });

  it("TestNonceAdd", async () => {
    const cases: Array<Array<any>> = [
      [0x01, [0x00], [0x01]],
      [0xff, [0xff], [0xfe, 0x01]],
      [0xffff, [0xff, 0xff], [0xfe, 0xff, 0x01]],
      [0xffffff, [0xff, 0xff, 0xff], [0xfe, 0xff, 0xff, 0x01]],
      [0xffffffff, [0xff, 0xff, 0xff, 0xff], [0xfe, 0xff, 0xff, 0xff, 0x01]],
      [
        0xffffffffff,
        [0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0x01],
      ],
      [
        0xffffffffffff,
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFF"),
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x01,
        ],
      ],
      [
        BigInt("0xFFFFFFFFFFFFFFFF"),
        [
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          0xff, 0xff,
        ],
        [
          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00,
        ],
      ],
    ];

    for (const test of cases) {
      // console.log('inside loop')
      const toBeAdd = test[0] as number | bigint;

      const x = new Uint8Array(secretbox.nonceLength);
      x.set(test[1]);
      const y = new Uint8Array(secretbox.nonceLength);
      y.set(test[2]);

      // console.log(x)
      // console.log(y)

      add(toBeAdd, x);
      // console.log(x)
      deepStrictEqual(x, y);
    }
  });
});

describe("Key Computation", () => {
  it("TestKey #1", async () => {
    const c = new Cipher();

    const zero32 = new Uint8Array(32);
    const zero16 = new Uint8Array(16);
    deepStrictEqual(zero32, c.dataKey);
    deepStrictEqual(zero32, c.nameKey);
    deepStrictEqual(zero16, c.nameTweak);
  });
  it("TestKey #2", async () => {
    const c = new Cipher();

    await key("potato", "", c);
    deepStrictEqual(
      new Uint8Array([
        0x74, 0x55, 0xc7, 0x1a, 0xb1, 0x7c, 0x86, 0x5b, 0x84, 0x71, 0xf4, 0x7b,
        0x79, 0xac, 0xb0, 0x7e, 0xb3, 0x1d, 0x56, 0x78, 0xb8, 0x0c, 0x7e, 0x2e,
        0xaf, 0x4f, 0xc8, 0x06, 0x6a, 0x9e, 0xe4, 0x68,
      ]),
      c.dataKey
    );
    deepStrictEqual(
      new Uint8Array([
        0x76, 0x5d, 0xa2, 0x7a, 0xb1, 0x5d, 0x77, 0xf9, 0x57, 0x96, 0x71, 0x1f,
        0x7b, 0x93, 0xad, 0x63, 0xbb, 0xb4, 0x84, 0x07, 0x2e, 0x71, 0x80, 0xa8,
        0xd1, 0x7a, 0x9b, 0xbe, 0xc1, 0x42, 0x70, 0xd0,
      ]),
      c.nameKey
    );
    deepStrictEqual(
      new Uint8Array([
        0xc1, 0x8d, 0x59, 0x32, 0xf5, 0x5b, 0x28, 0x28, 0xc5, 0xe1, 0xe8, 0x72,
        0x15, 0x52, 0x03, 0x10,
      ]),
      c.nameTweak
    );
  });
  it("TestKey #3", async () => {
    const c = new Cipher();
    await key("Potato", "", c);
    deepStrictEqual(
      new Uint8Array([
        0xae, 0xea, 0x6a, 0xd3, 0x47, 0xdf, 0x75, 0xb9, 0x63, 0xce, 0x12, 0xf5,
        0x76, 0x23, 0xe9, 0x46, 0xd4, 0x2e, 0xd8, 0xbf, 0x3e, 0x92, 0x8b, 0x39,
        0x24, 0x37, 0x94, 0x13, 0x3e, 0x5e, 0xf7, 0x5e,
      ]),
      c.dataKey
    );
    deepStrictEqual(
      new Uint8Array([
        0x54, 0xf7, 0x02, 0x6e, 0x8a, 0xfc, 0x56, 0x0a, 0x86, 0x63, 0x6a, 0xab,
        0x2c, 0x9c, 0x51, 0x62, 0xe5, 0x1a, 0x12, 0x23, 0x51, 0x83, 0x6e, 0xaf,
        0x50, 0x42, 0x0f, 0x98, 0x1c, 0x86, 0x0a, 0x19,
      ]),
      c.nameKey
    );
    deepStrictEqual(
      new Uint8Array([
        0xf8, 0xc1, 0xb6, 0x27, 0x2d, 0x52, 0x9b, 0x4a, 0x8f, 0xda, 0xeb, 0x42,
        0x4a, 0x28, 0xdd, 0xf3,
      ]),
      c.nameTweak
    );
  });
  it("TestKey #4", async () => {
    const c = new Cipher();
    await key("potato", "sausage", c);
    deepStrictEqual(
      new Uint8Array([
        0x8e, 0x9b, 0x6b, 0x99, 0xf8, 0x69, 0x4, 0x67, 0xa0, 0x71, 0xf9, 0xcb,
        0x92, 0xd0, 0xaa, 0x78, 0x7f, 0x8f, 0xf1, 0x78, 0xbe, 0xc9, 0x6f, 0x99,
        0x9f, 0xd5, 0x20, 0x6e, 0x64, 0x4a, 0x1b, 0x50,
      ]),
      c.dataKey
    );
    deepStrictEqual(
      new Uint8Array([
        0x3e, 0xa9, 0x5e, 0xf6, 0x81, 0x78, 0x2d, 0xc9, 0xd9, 0x95, 0x5d, 0x22,
        0x5b, 0xfd, 0x44, 0x2c, 0x6f, 0x5d, 0x68, 0x97, 0xb0, 0x29, 0x1, 0x5c,
        0x6f, 0x46, 0x2e, 0x2a, 0x9d, 0xae, 0x2c, 0xe3,
      ]),
      c.nameKey
    );
    deepStrictEqual(
      new Uint8Array([
        0xf1, 0x7f, 0xd7, 0x14, 0x1d, 0x65, 0x27, 0x4f, 0x36, 0x3f, 0xc2, 0xa0,
        0x4d, 0xd2, 0x14, 0x8a,
      ]),
      c.nameTweak
    );
  });
  it("TestKey #5", async () => {
    const c = new Cipher();
    await key("potato", "Sausage", c);
    deepStrictEqual(
      new Uint8Array([
        0xda, 0x81, 0x8c, 0x67, 0xef, 0x11, 0xf, 0xc8, 0xd5, 0xc8, 0x62, 0x4b,
        0x7f, 0xe2, 0x9e, 0x35, 0x35, 0xb0, 0x8d, 0x79, 0x84, 0x89, 0xac, 0xcb,
        0xa0, 0xff, 0x2, 0x72, 0x3, 0x1a, 0x5e, 0x64,
      ]),
      c.dataKey
    );
    deepStrictEqual(
      new Uint8Array([
        0x2, 0x81, 0x7e, 0x7b, 0xea, 0x99, 0x81, 0x5a, 0xd0, 0x2d, 0xb9, 0x64,
        0x48, 0xb0, 0x28, 0x27, 0x7c, 0x20, 0xb4, 0xd4, 0xa4, 0x68, 0xad, 0x4e,
        0x5c, 0x29, 0xf, 0x79, 0xef, 0xee, 0xdb, 0x3b,
      ]),
      c.nameKey
    );
    deepStrictEqual(
      new Uint8Array([
        0x9a, 0xb5, 0xb, 0x3d, 0xcb, 0x60, 0x59, 0x55, 0xa5, 0x4d, 0xe6, 0xb6,
        0x47, 0x3, 0x23, 0xe2,
      ]),
      c.nameTweak
    );
  });
  it("TestKey #6", async () => {
    const zero32 = new Uint8Array(32);
    const zero16 = new Uint8Array(16);
    const c = new Cipher();
    await key("", "", c);
    deepStrictEqual(zero32, c.dataKey);
    deepStrictEqual(zero32, c.nameKey);
    deepStrictEqual(zero16, c.nameTweak);
  });
});

describe("Size Computation", () => {
  it("TestEncryptedSize", async () => {
    const c = new Cipher();

    const cases: number[][] = [
      [0, 32],
      [1, 32 + 16 + 1],
      [65536, 32 + 16 + 65536],
      [65537, 32 + 16 + 65536 + 16 + 1],
      [1 << 20, 32 + 16 * (16 + 65536)],
      [(1 << 20) + 65535, 32 + 16 * (16 + 65536) + 16 + 65535],
      [1 << 30, 32 + 16384 * (16 + 65536)],
      //   [(1 << 40) + 1, 32 + 16777216 * (16 + 65536) + 16 + 1], // too large for js number
    ];

    for (const [input, expected] of cases) {
      const actual = encryptedSize(input);
      deepEqual(actual, expected);

      const recovered = decryptedSize(expected);
      deepEqual(input, recovered);
    }
  });

  it("TestDecryptedSize", async () => {
    const c = new Cipher();

    const cases = [
      [0, msgErrorEncryptedFileTooShort],
      [0, msgErrorEncryptedFileTooShort],
      [1, msgErrorEncryptedFileTooShort],
      [7, msgErrorEncryptedFileTooShort],
      [32 + 1, msgErrorEncryptedFileBadHeader],
      [32 + 16, msgErrorEncryptedFileBadHeader],
      [32 + 16 + 65536 + 1, msgErrorEncryptedFileBadHeader],
      [32 + 16 + 65536 + 16, msgErrorEncryptedFileBadHeader],
    ];

    for (const [input, errMsg] of cases) {
      throws(() => decryptedSize(input as number), new Error(errMsg as string));
    }
  });
});

describe("RealEnc", () => {
  const file0 = new Uint8Array([
    0x52, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
  ]);
  const file1 = new Uint8Array([
    0x52, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x09, 0x5b, 0x44, 0x6c,
    0xd6, 0x23, 0x7b, 0xbc, 0xb0, 0x8d, 0x09, 0xfb, 0x52, 0x4c, 0xe5, 0x65,
    0xaa,
  ]);
  const file16 = new Uint8Array([
    0x52, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0xb9, 0xc4, 0x55, 0x2a,
    0x27, 0x10, 0x06, 0x29, 0x18, 0x96, 0x0a, 0x3e, 0x60, 0x8c, 0x29, 0xb9,
    0xaa, 0x8a, 0x5e, 0x1e, 0x16, 0x5b, 0x6d, 0x07, 0x5d, 0xe4, 0xe9, 0xbb,
    0x36, 0x7f, 0xd6, 0xd4,
  ]);
  it("TestEncryptData", async () => {
    const cases = [
      [new Uint8Array(0), file0],
      [new Uint8Array([1]), file1],
      [
        new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]),
        file16,
      ],
    ];

    for (const [input, expected] of cases) {
      const c = new Cipher();
      // console.log(`init c=${c.toString()}`)

      const nonce = new Uint8Array([
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
      ]);
      const encrypted = encryptData(input, nonce, c);
      deepStrictEqual(encrypted, expected);
      // console.log(`after enc c=${c.toString()}`)

      const decrypted = decryptData(encrypted, c);
      deepStrictEqual(decrypted, input);
    }
  });
});
